# React Router .htaccess for dataengineerhub.blog
# This file should be placed in your main domain's web root directory

<IfModule mod_rewrite.c>
  # Turn on the rewrite engine
  RewriteEngine On
  RewriteBase /

  # ----------------------------------------------------------------------
  # FORCING HTTPS (SSL)
  # ----------------------------------------------------------------------
  # If the connection is not already HTTPS, redirect to it
  RewriteCond %{HTTPS} !=on
  RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R=301,L]

  # ----------------------------------------------------------------------
  # FORCING WWW
  # ----------------------------------------------------------------------
  # If the URL does not start with www, redirect to the www version
  RewriteCond %{HTTP_HOST} !^www\. [NC]
  RewriteRule ^(.*)$ https://www.%{HTTP_HOST}/$1 [R=301,L]

  # ----------------------------------------------------------------------
  # EZOIC ADS.TXT REDIRECT
  # ----------------------------------------------------------------------
  # This rule must come BEFORE the React Router rule below.
  # IMPORTANT: Replace "dataengineerhub.blog" with your actual domain.
  # ----------------------------------------------------------------------
  RewriteRule ^ads\.txt$ https://srv.adstxtmanager.com/19305/dataengineerhub.blog [R=301,L]

  # ----------------------------------------------------------------------
  # REACT ROUTER HANDLER (Your Original Rule)
  # ----------------------------------------------------------------------
  # Don't rewrite existing files or directories
  RewriteCond %{REQUEST_FILENAME} -f [OR]
  RewriteCond %{REQUEST_FILENAME} -d
  RewriteRule ^ - [L]
  
  # Rewrite everything else to index.html to allow HTML5 state links
  RewriteRule ^ index.html [L]
</IfModule>

# Security headers for better performance and security (Your Original Rules)
<IfModule mod_headers.c>
  # Enable CORS for API calls to WordPress subdomain
  Header always set Access-Control-Allow-Origin "https://app.dataengineerhub.blog"
  Header always set Access-Control-Allow-Methods "GET, POST, OPTIONS"
  Header always set Access-Control-Allow-Headers "Content-Type, Authorization"
  
  # Security headers
  Header always set X-Content-Type-Options nosniff
  Header always set X-Frame-Options DENY
  Header always set X-XSS-Protection "1; mode=block"
  Header always set Referrer-Policy "strict-origin-when-cross-origin"
  
  # Cache static assets
  <FilesMatch "\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$">
    Header set Cache-Control "public, max-age=31536000"
  </FilesMatch>
  
  # Don't cache HTML files
  <FilesMatch "\.(html|htm)$">
    Header set Cache-Control "no-cache, no-store, must-revalidate"
    Header set Pragma "no-cache"
    Header set Expires 0
  </FilesMatch>
</IfModule>

# Gzip compression for better performance (Your Original Rules)
<IfModule mod_deflate.c>
  AddOutputFilterByType DEFLATE text/plain
  AddOutputFilterByType DEFLATE text/html
  AddOutputFilterByType DEFLATE text/xml
  AddOutputFilterByType DEFLATE text/css
  AddOutputFilterByType DEFLATE application/xml
  AddOutputFilterByType DEFLATE application/xhtml+xml
  AddOutputFilterByType DEFLATE application/rss+xml
  AddOutputFilterByType DEFLATE application/javascript
  AddOutputFilterByType DEFLATE application/x-javascript
  AddOutputFilterByType DEFLATE application/json
</IfModule>

# Prevent access to sensitive files (Your Original Rules)
<Files ~ "^\.">
  Order allow,deny
  Deny from all
</Files>

# Block access to source files (Your Original Rules)
<FilesMatch "\.(jsx?|ts|tsx|json|md)$">
  Order allow,deny
  Deny from all
</FilesMatch>